var domInsert = require("./dom-insert");
var complain;

function getComponentDefs(result) {
  var componentDefs = result.h_;

  if (!componentDefs) {
    throw Error("No component");
  }
  return componentDefs;
}

function RenderResult(out) {
  this.out = this.B_ = out;
  this.h_ = undefined;
}

module.exports = RenderResult;

var proto = RenderResult.prototype = {
  getComponent: function () {
    return this.getComponents()[0];
  },
  getComponents: function (selector) {
    if (this.h_ === undefined) {
      throw Error("Not added to DOM");
    }

    var componentDefs = getComponentDefs(this);

    var components = [];

    componentDefs.forEach(function (componentDef) {
      var component = componentDef.m_;
      if (!selector || selector(component)) {
        components.push(component);
      }
    });

    return components;
  },

  afterInsert: function (doc) {
    var out = this.B_;
    var componentsContext = out.h_;
    if (componentsContext) {
      this.h_ = componentsContext.C_(doc);
    } else {
      this.h_ = null;
    }

    return this;
  },
  getNode: function (doc) {
    return this.B_.D_(doc);
  },
  getOutput: function () {
    return this.B_.E_();
  },
  toString: function () {
    return this.B_.toString();
  },
  document: typeof document != "undefined" && document
};

Object.defineProperty(proto, "html", {
  get: function () {
    return this.toString();
    // eslint-disable-next-line no-constant-condition
  }
});

Object.defineProperty(proto, "context", {
  get: function () {
    return this.B_;
    // eslint-disable-next-line no-constant-condition
  }
});

// Add all of the following DOM methods to Component.prototype:
// - appendTo(referenceEl)
// - replace(referenceEl)
// - replaceChildrenOf(referenceEl)
// - insertBefore(referenceEl)
// - insertAfter(referenceEl)
// - prependTo(referenceEl)
domInsert(proto, function getEl(renderResult, referenceEl) {
  return renderResult.getNode(referenceEl.ownerDocument);
}, function afterInsert(renderResult, referenceEl) {
  var isShadow = typeof ShadowRoot === "function" && referenceEl instanceof ShadowRoot;
  return renderResult.afterInsert(isShadow ? referenceEl : referenceEl.ownerDocument);
});