var VNode = require("./VNode");
var VComment = require("./VComment");
var VDocumentFragment = require("./VDocumentFragment");
var VElement = require("./VElement");
var VText = require("./VText");
var VComponent = require("./VComponent");
var VFragment = require("./VFragment");

var defaultDocument = typeof document != "undefined" && document;
var specialHtmlRegexp = /[&<]/;

function virtualizeChildNodes(node, vdomParent, ownerComponent) {
  var curChild = node.firstChild;
  while (curChild) {
    vdomParent.bo_(virtualize(curChild, ownerComponent));
    curChild = curChild.nextSibling;
  }
}

function virtualize(node, ownerComponent) {
  switch (node.nodeType) {
    case 1:
      return VElement.bL_(node, virtualizeChildNodes, ownerComponent);
    case 3:
      return new VText(node.nodeValue, ownerComponent);
    case 8:
      return new VComment(node.nodeValue, ownerComponent);
    case 11:
      var vdomDocFragment = new VDocumentFragment();
      virtualizeChildNodes(node, vdomDocFragment, ownerComponent);
      return vdomDocFragment;
  }
}

function virtualizeHTML(html, doc, ownerComponent) {
  if (!specialHtmlRegexp.test(html)) {
    return new VText(html, ownerComponent);
  }

  var container = doc.createElement("body");
  container.innerHTML = html;
  var vdomFragment = new VDocumentFragment();

  var curChild = container.firstChild;
  while (curChild) {
    vdomFragment.bo_(virtualize(curChild, ownerComponent));
    curChild = curChild.nextSibling;
  }

  return vdomFragment;
}

var Node_prototype = VNode.prototype;

/**
 * Shorthand method for creating and appending a Text node with a given value
 * @param  {String} value The text value for the new Text node
 */
Node_prototype.t = function (value) {
  var type = typeof value;
  var vdomNode;

  if (type !== "string") {
    if (value == null) {
      value = "";
    } else if (type === "object") {
      if (value.toHTML) {
        vdomNode = virtualizeHTML(value.toHTML(), document);
      }
    }
  }

  this.bo_(vdomNode || new VText(value.toString()));
  return this.bI_();
};

/**
 * Shorthand method for creating and appending a Comment node with a given value
 * @param  {String} value The value for the new Comment node
 */
Node_prototype.c = function (value) {
  this.bo_(new VComment(value));
  return this.bI_();
};

Node_prototype.bs_ = function () {
  return this.bo_(new VDocumentFragment());
};

exports.aY_ = VComment;
exports.aX_ = VDocumentFragment;
exports.aW_ = VElement;
exports.aZ_ = VText;
exports.b__ = VComponent;
exports.ba_ = VFragment;
exports.bL_ = virtualize;
exports.bb_ = virtualizeHTML;
exports.bc_ = defaultDocument;